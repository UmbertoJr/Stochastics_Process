{
    "collab_server" : "",
    "contents" : "ferguson.def <- function(number.obs, M){\n  sample <- seq(from=-5, to=5, length.out = number.obs)\n  par <- rep(0,number.obs)\n  sim <- rep(0,number.obs)\n  par[1] <- M*pnorm(sample[1])\n  sim[1] <- rgamma(1,par[1])\n  for(i in 2:number.obs){\n    par[i] <- M*(pnorm(sample[i]) - pnorm(sample[i-1]))\n    sim[i] <- rgamma(1,par[i])\n  }\n  tot <- sum(sim)\n  ret <- sim/tot\n  return(ret)\n}\n\nnumber.obs=100\na <- ferguson.def(number.obs,M=10)\n\nsample <- seq(from=-5, to=5, length.out = number.obs)\nmatplot(sample, cumsum(a))\ncurve(pnorm, add=T, col='blue')\n\n\nM <- c(5, 20 , 50, 100)\nnumber.obs=1000\nsim= 1000\na <- list()\nfor(i in 1:4){\n  a[[i]] <- matrix(nrow = sim, ncol = number.obs)\n  for(l in 1:sim)\n    a[[i]][l,] <- ferguson.def(number.obs,M=M[i])\n}\nsave(a, file = 'ferguson.Rdata')\n\n\nsample <- seq(from=-5, to=5, length.out = number.obs)\npar(mfrow=c(2,2), mar=c(2,2,2,1))\nfor(i in 1:4){\n  el <- apply(a[[i]],1,cumsum )\n  matplot(sample,el, type = 'l', lwd = 0.00001, lty=3,main = paste('M=', M[i]))\n  curve(pnorm, add=T, col='black', lwd=2)\n}\n\nmu.fun <- list(rep(0,sim),rep(0,sim),rep(0,sim),rep(0,sim))\nvar.fun <- list(rep(0,sim),rep(0,sim),rep(0,sim),rep(0,sim))\nfor(m in 1:4){\n  for(i in 1:sim){\n    mu.fun[[m]][i] <- sample%*%a[[m]][i,]\n    var.fun[[m]][i] <- (sample)^2%*%a[[m]][i,] - (sample%*%a[[m]][i,])^2\n  }\n  plot(density(mu.fun[[m]]), main = paste('mean.fun M=', M[m]))\n}\n\nfor(m in 1:4){\n  plot(density(var.fun[[m]]), main = paste('var.fun M=', M[m]))\n}\n\n\n\n\n\n\n# sethuraman --------------------------------------------------------------\n\n\nsethuraman.cost <- function(number.obs, M){\n  n <- 5000\n  y <- rnorm(n)\n  thet <- rbeta(n,shape1 = 1, shape2 = M)\n  prob <- rep(0,n)\n  prob[1] <- thet[1]\n  for(i in 2:n){\n    prob[i]<- thet[i]*prod(1 - thet[1:i-1])\n  }\n  dat <- sample(y,size= number.obs, prob=prob,replace=T)\n  return(dat)\n}\n\ndat <- sethuraman.cost(100,10)\nplot(ecdf(dat))\ncurve(pnorm,add=T)\n\n\nM <- c(5, 20 , 50, 100)\nnumber.obs=100\nsim= 100\na <- list()\nfor(i in 1:4){\n  a[[i]] <- matrix(nrow = sim, ncol = number.obs)\n  for(l in 1:sim)\n    a[[i]][l,] <- sethuraman.cost(number.obs,M=M[i])\n}\n\n#save(a, file = 'sethuraman2.RData')\n\n#load(file = 'sethuraman.RData')\n\nrequire(randomcoloR)\n\n\npar(mfrow=c(2,2), mar=c(2,2,2,1))\nfor(i in 1:4){\n  curve(pnorm, col='black', lwd=2, from = -4, to=4)\n  for(l in 1:100){\n    plot(ecdf(a[[i]][l,]),verticals=TRUE, do.points=FALSE, lwd = 0.00001, lty=1,main = paste('M=', M[i]), add=T,col=randomColor())\n  }\n  curve(pnorm, add=T, col='black', lwd=2)\n}\n\nmu.fun <- list(rep(0,sim),rep(0,sim),rep(0,sim),rep(0,sim))\nvar.fun <- list(rep(0,sim),rep(0,sim),rep(0,sim),rep(0,sim))\nfor(m in 1:4){\n  for(i in 1:sim){\n    mu.fun[[m]][i] <- mean(a[[m]][i,])\n    var.fun[[m]][i] <- var(a[[m]][i,])\n  }\n  plot(density(mu.fun[[m]]), main = paste('mean.fun M=', M[m]))\n}\n\nfor(m in 1:4){\n  plot(density(var.fun[[m]]), main = paste('var.fun M=', M[m]))\n}\n\n\n\n\n# MDP ---------------------------------------------------------------------\nsim = 100\nG <- matrix(nrow = sim,ncol = number.obs)\nfor(t in 1:sim){\n  M <- rgamma(1,3,3)\n  G[t,] <- sethuraman.cost(number.obs,M)\n}\nsave(G, file = 'MDP.RData')\n\npar(mfrow=c(1,2), mar=c(3,3,3,3))\ncurve(pnorm, col='black', lwd=2, from = -4, to=4)\nfor(l in 1:100){\n  plot(ecdf(G[l,]),verticals=TRUE, do.points=FALSE, lwd = 0.00001, lty=1,main = 'M sim from gamma', add=T,col=randomColor())\n}\ncurve(pnorm, add=T, col='black', lwd=2)\n\ncurve(dnorm, col='black', lwd=2, from = -4, to=4)\nfor(l in 1:100){\n  lines(density(G[l,]), lwd = 0.00001, lty=1,main ='M sim from gamma',col=randomColor())\n}\ncurve(dnorm, add=T, col='black', lwd=2)\n\n\nmu.fun <- rep(0,sim)\nvar.fun <- rep(0,sim)\n\nfor(i in 1:sim){\n  mu.fun[i] <- mean(G[i,])\n  var.fun[i] <- var(G[i,])\n}\nplot(density(mu.fun), main = 'mean distribution')\nplot(density(var.fun), main = 'variance distribution')\n\n\n\n\n",
    "created" : 1509989243421.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4246155301",
    "id" : "E742F5D",
    "lastKnownWriteTime" : 1510045549,
    "last_content_update" : 1510045549895,
    "path" : "C:/Users/Umbertojunior/Desktop/data science/third Semestr/stochastic process/hw 1/Homework_1/prove1.R",
    "project_path" : "prove1.R",
    "properties" : {
        "tempName" : "Untitled3"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}